import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import requests
import json
from datetime import datetime

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Load environment variables
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    pass

# ЁЯФС BOT TOKEN - рдпрд╣рд╛рдБ рдЕрдкрдирд╛ token рдбрд╛рд▓реЗрдВ
BOT_TOKEN = os.getenv('8455342768:AAH3URoRvQJY5ySG8YEH8LO6txwMLvLk6Lw')
if not BOT_TOKEN:
    # рдЕрдЧрд░ environment variable рдирд╣реАрдВ рдорд┐рд▓рд╛ рддреЛ directly рдбрд╛рд▓реЗрдВ
    BOT_TOKEN = "8455342768:AAH3URoRvQJY5ySG8YEH8LO6txwMLvLk6Lw"  # ЁЯФе рдпрд╣рд╛рдБ рдЕрдкрдирд╛ token рдбрд╛рд▓реЗрдВ

if BOT_TOKEN == "YOUR_ACTUAL_BOT_TOKEN_HERE":
    logging.error("тЭМ PLEASE UPDATE BOT_TOKEN IN THE CODE!")
    exit(1)

# ЁЯУв TELEGRAM CHANNELS - Force Join рдХреЗ рд▓рд┐рдП
CHANNELS = [
    {
        'id': '@rajakkhan4x',  # Channel username
        'name': 'Rajak Khan 4X',
        'url': 'https://t.me/rajakkhan4x'
    },
    {
        'id': '@PromotionsOffers', 
        'name': 'Promotions & Offers',
        'url': 'https://t.me/+eqtzUeGK774yMzQ1'
    },
    {
        'id': '@WorldMainSMMPanel',
        'name': 'WorldMain SMM Panel', 
        'url': 'https://t.me/+rL16oopNfU5iYzk9'
    },
    {
        'id': '@SMMUpdatesChannel',
        'name': 'SMM Updates',
        'url': 'https://t.me/+XUbztPQKGScwNGNl'
    }
]

# ЁЯФЧ NUMBER INFO API
NUMBER_API_URL = "https://happy-api-app.vercel.app/?num="

# User data storage (production рдореЗрдВ database use рдХрд░реЗрдВ)
user_data = {}

class UserState:
    def __init__(self, user_id):
        self.user_id = user_id
        self.joined_channels = set()
        self.last_activity = datetime.now()
    
    def has_joined_all_channels(self):
        return len(self.joined_channels) == len(CHANNELS)

def get_user_state(user_id):
    if user_id not in user_data:
        user_data[user_id] = UserState(user_id)
    return user_data[user_id]

async def check_channel_membership(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """Check if user has joined all required channels"""
    try:
        user_state = get_user_state(user_id)
        
        for i, channel in enumerate(CHANNELS):
            try:
                # Check if user is member of channel
                chat_member = await context.bot.get_chat_member(
                    chat_id=channel['id'], 
                    user_id=user_id
                )
                
                if chat_member.status in ['member', 'administrator', 'creator']:
                    user_state.joined_channels.add(i)
                else:
                    if i in user_state.joined_channels:
                        user_state.joined_channels.remove(i)
                        
            except Exception as e:
                logging.warning(f"Could not check channel {channel['id']}: {e}")
                continue
                
        return user_state.has_joined_all_channels()
        
    except Exception as e:
        logging.error(f"Error checking channel membership: {e}")
        return False

async def get_number_info(phone_number: str) -> dict:
    """Get number information from API"""
    try:
        response = requests.get(f'{NUMBER_API_URL}{phone_number}', timeout=10)
        if response.status_code == 200:
            return response.json()
        return {'error': 'API not responding'}
    except Exception as e:
        logging.error(f"Error fetching number info: {e}")
        return {'error': str(e)}

def format_number_info(info: dict) -> str:
    """Format number information for display"""
    if not info or info.get('error'):
        return 'тЭМ рдЗрд╕ рдирдВрдмрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рд╕рд╣реА рдирдВрдмрд░ рдбрд╛рд▓реЗрдВред'

    message = "ЁЯУ▒ *рдирдВрдмрд░ рдЬрд╛рдирдХрд╛рд░реА*\n\n"
    
    # Basic info
    if info.get('number'):
        message += f"ЁЯФв *рдирдВрдмрд░:* `{info['number']}`\n"
    
    if info.get('carrier'):
        message += f"ЁЯПв *рдСрдкрд░реЗрдЯрд░:* {info['carrier']}\n"
    
    if info.get('country'):
        message += f"ЁЯМН *рджреЗрд╢:* {info['country']}\n"
    
    if info.get('location'):
        message += f"ЁЯУН *рд▓реЛрдХреЗрд╢рди:* {info['location']}\n"
    
    if info.get('timezone'):
        message += f"тП░ *рдЯрд╛рдЗрдордЬреЛрди:* {info['timezone']}\n"
    
    # Validity
    if 'valid' in info:
        status = "тЬЕ *рд╡реИрд▓рд┐рдб рдирдВрдмрд░*" if info['valid'] else "тЭМ *рдЗрдирд╡реИрд▓рд┐рдб рдирдВрдмрд░*"
        message += f"ЁЯУК *рд╕реНрдЯреЗрдЯрд╕:* {status}\n"
    
    return message

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    user = update.effective_user
    user_state = get_user_state(user.id)
    
    welcome_text = (
        f"ЁЯСЛ рдирдорд╕реНрддреЗ *{user.first_name}*!\\n\\n"
        f"ЁЯдЦ *Number Information Bot* рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!\\n\\n"
        f"ЁЯУЮ рдХрд┐рд╕реА рднреА рдирдВрдмрд░ рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\\.\\n\\n"
        f"тЪая╕П рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рднреА рдЪреИрдирд▓реНрд╕ рдХреЛ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ:"
    )
    
    # Create channel buttons
    keyboard = []
    for channel in CHANNELS:
        keyboard.append([InlineKeyboardButton(
            f"ЁЯУв {channel['name']}", 
            url=channel['url']
        )])
    
    keyboard.append([InlineKeyboardButton(
        "тЬЕ рдореИрдВрдиреЗ рд╕рднреА рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдП", 
        callback_data='check_join_status'
    )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

async def check_join_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle check join status callback"""
    query = update.callback_query
    user = query.from_user
    user_state = get_user_state(user.id)
    
    await query.answer()
    
    try:
        has_joined_all = await check_channel_membership(user.id, context)
        
        if has_joined_all:
            # User has joined all channels
            main_keyboard = [
                [KeyboardButton("ЁЯУЮ рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░реЗрдВ")],
                [KeyboardButton("тД╣я╕П рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ")],
                [KeyboardButton("ЁЯФД рдЪреИрдирд▓реНрд╕ рдлрд┐рд░ рд╕реЗ рдЪреЗрдХ рдХрд░реЗрдВ")]
            ]
            reply_markup = ReplyKeyboardMarkup(main_keyboard, resize_keyboard=True)
            
            success_text = (
                f"ЁЯОЙ рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ *{user.first_name}*\\!\\n\\n"
                f"тЬЕ рдЖрдкрдиреЗ рд╕рднреА рдЪреИрдирд▓реНрд╕ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдП рд╣реИрдВ\\.\\n\\n"
                f"ЁЯУЮ рдЕрдм рдЖрдк рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:\\n\\n"
                f"*рдЙрджрд╛рд╣рд░рдг:*\\n"
                f"тАв 91XXXXXXXXXX\\n"
                f"тАв \\+91XXXXXXXXXX\\n"
                f"тАв XXXXXXXXXX\\n\\n"
                f"ЁЯФН рдиреАрдЪреЗ рджрд┐рдП рдмрдЯрди рд╕реЗ рд╕рд░реНрдЪ рд╢реБрд░реВ рдХрд░реЗрдВ:"
            )
            
            await query.edit_message_text(
                success_text,
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
            
        else:
            # User hasn't joined all channels
            await query.answer("тЭМ рдЖрдкрдиреЗ рдЕрднреА рддрдХ рд╕рднреА рдЪреИрдирд▓реНрд╕ рдЬреНрд╡рд╛рдЗрди рдирд╣реАрдВ рдХрд┐рдП рд╣реИрдВ!", show_alert=True)
            
            # Show channels again with updated status
            keyboard = []
            for i, channel in enumerate(CHANNELS):
                status = " тЬЕ" if i in user_state.joined_channels else ""
                keyboard.append([InlineKeyboardButton(
                    f"ЁЯУв {channel['name']}{status}", 
                    url=channel['url']
                )])
            
            keyboard.append([InlineKeyboardButton(
                "ЁЯФБ рдлрд┐рд░ рд╕реЗ рдЪреЗрдХ рдХрд░реЗрдВ", 
                callback_data='check_join_status'
            )])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            error_text = (
                f"тЭМ *{user.first_name}*, рдЖрдкрдиреЗ рдЕрднреА рддрдХ рд╕рднреА рдЪреИрдирд▓реНрд╕ рдЬреНрд╡рд╛рдЗрди рдирд╣реАрдВ рдХрд┐рдП рд╣реИрдВ\\!\\n\\n"
                f"тЪая╕П рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рднреА рдЪреИрдирд▓реНрд╕ рдХреЛ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ рдФрд░ рдлрд┐рд░ \"рдореИрдВрдиреЗ рд╕рднреА рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдП\" рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ:"
            )
            
            await query.edit_message_text(
                error_text,
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
            
    except Exception as e:
        logging.error(f"Error in check_join_status: {e}")
        await query.answer("тЭМ рдЪреЗрдХ рдХрд░рдиреЗ рдореЗрдВ error рдЖрдпрд╛! рдмрд╛рдж рдореЗрдВ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред", show_alert=True)

async def handle_search_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle search number button"""
    user = update.effective_user
    
    # Check if user has joined all channels
    has_joined_all = await check_channel_membership(user.id, context)
    if not has_joined_all:
        await show_channel_join_required(update, context)
        return
    
    search_text = (
        "ЁЯФН *рдирдВрдмрд░ рд╕рд░реНрдЪ*\\n\\n"
        "рдХреГрдкрдпрд╛ рдирдВрдмрд░ рдбрд╛рд▓реЗрдВ:\\n\\n"
        "*рдлреЙрд░реНрдореЗрдЯ:*\\n"
        "тАв 91XXXXXXXXXX\\n"
        "тАв \\+91XXXXXXXXXX\\n"
        "тАв XXXXXXXXXX\\n\\n"
        "рдЙрджрд╛рд╣рд░рдг: 919876543210"
    )
    
    await update.message.reply_text(
        search_text,
        parse_mode='MarkdownV2'
    )

async def handle_about_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle about button"""
    about_text = (
        "ЁЯдЦ *Number Information Bot*\\n\\n"
        "ЁЯУЮ рдХрд┐рд╕реА рднреА рдирдВрдмрд░ рдХреА рдкреВрд░реА рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ\\n\\n"
        "тЬи *рдлреАрдЪрд░реНрд╕:*\\n"
        "тАв рдирдВрдмрд░ рд╡реИрд▓рд┐рдбреЗрд╢рди\\n"
        "тАв рдСрдкрд░реЗрдЯрд░ рдЬрд╛рдирдХрд╛рд░реА\\n"
        "тАв рд▓реЛрдХреЗрд╢рди рдбрд┐рдЯреЗрд▓реНрд╕\\n"
        "тАв рджреЗрд╢ рдФрд░ рдЯрд╛рдЗрдордЬреЛрди\\n\\n"
        "ЁЯСитАНЁЯТ╗ рдбреЗрд╡рд▓рдкрд░: @rajakkhan4x\\n"
        "ЁЯУв рдЕрдкрдбреЗрдЯреНрд╕: @WorldMainSMMPanel"
    )
    
    keyboard = [
        [InlineKeyboardButton("ЁЯУв рдЕрдкрдбреЗрдЯ рдЪреИрдирд▓", url="https://t.me/+rL16oopNfU5iYzk9")],
        [InlineKeyboardButton("ЁЯСитАНЁЯТ╗ рдбреЗрд╡рд▓рдкрд░", url="https://t.me/rajakkhan4x")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        about_text,
        reply_markup=reply_markup,
        parse_mode='MarkdownV2'
    )

async def handle_recheck_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle recheck channels button"""
    user = update.effective_user
    has_joined_all = await check_channel_membership(user.id, context)
    
    if has_joined_all:
        await update.message.reply_text("тЬЕ рдЖрдк рд╕рднреА рдЪреИрдирд▓реНрд╕ рдХреЗ рдореЗрдВрдмрд░ рд╣реИрдВ! рдЕрдм рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
    else:
        await show_channel_join_required(update, context)

async def show_channel_join_required(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show channel join required message"""
    user = update.effective_user
    user_state = get_user_state(user.id)
    
    keyboard = []
    for i, channel in enumerate(CHANNELS):
        status = " тЬЕ" if i in user_state.joined_channels else ""
        keyboard.append([InlineKeyboardButton(
            f"ЁЯУв {channel['name']}{status}", 
            url=channel['url']
        )])
    
    keyboard.append([InlineKeyboardButton(
        "тЬЕ рдореИрдВрдиреЗ рд╕рднреА рдЪреИрдирд▓ рдЬреНрд╡рд╛рдЗрди рдХрд░ рд▓рд┐рдП", 
        callback_data='check_join_status'
    )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    error_text = (
        f"тЭМ *{user.first_name}*, рдЖрдкрдиреЗ рдЕрднреА рддрдХ рд╕рднреА рдЪреИрдирд▓реНрд╕ рдЬреНрд╡рд╛рдЗрди рдирд╣реАрдВ рдХрд┐рдП рд╣реИрдВ\\!\\n\\n"
        f"тЪая╕П рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕рднреА рдЪреИрдирд▓реНрд╕ рдХреЛ рдЬреНрд╡рд╛рдЗрди рдХрд░реЗрдВ:"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            error_text,
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
    else:
        await update.message.reply_text(
            error_text,
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )

async def handle_number_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle number input from user"""
    user = update.effective_user
    message_text = update.message.text
    
    # Check if user has joined all channels
    has_joined_all = await check_channel_membership(user.id, context)
    if not has_joined_all:
        await show_channel_join_required(update, context)
        return
    
    # Skip button texts
    if message_text in ['ЁЯУЮ рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░реЗрдВ', 'тД╣я╕П рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ', 'ЁЯФД рдЪреИрдирд▓реНрд╕ рдлрд┐рд░ рд╕реЗ рдЪреЗрдХ рдХрд░реЗрдВ']:
        return
    
    # Process number
    phone_number = message_text.strip()
    
    # Validate number format
    if not phone_number.replace('+', '').replace(' ', '').isdigit():
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ рд╕рд╣реА рдирдВрдмрд░ рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рдбрд╛рд▓реЗрдВред")
        return
    
    # Show loading message
    loading_msg = await update.message.reply_text("ЁЯФД рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рд╛рдкреНрдд рдХреА рдЬрд╛ рд░рд╣реА рд╣реИ...")
    
    try:
        # Get number information
        number_info = await get_number_info(phone_number)
        
        # Format and send response
        formatted_info = format_number_info(number_info)
        
        await context.bot.edit_message_text(
            chat_id=loading_msg.chat_id,
            message_id=loading_msg.message_id,
            text=formatted_info,
            parse_mode='MarkdownV2'
        )
        
    except Exception as e:
        logging.error(f"Error processing number: {e}")
        await context.bot.edit_message_text(
            chat_id=loading_msg.chat_id,
            message_id=loading_msg.message_id,
            text="тЭМ рд╕рд░реНрдЪ рдХрд░рдиреЗ рдореЗрдВ error рдЖрдпрд╛! рдХреГрдкрдпрд╛ рдмрд╛рдж рдореЗрдВ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред"
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle errors"""
    logging.error(f"Update {update} caused error {context.error}")

def main():
    """Start the bot"""
    # Create application
    application = Application.builder().token(BOT_TOKEN).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("search", handle_search_button))
    application.add_handler(CommandHandler("about", handle_about_button))
    
    application.add_handler(CallbackQueryHandler(check_join_status_callback, pattern='check_join_status'))
    
    application.add_handler(MessageHandler(filters.Text("ЁЯУЮ рдирдВрдмрд░ рд╕рд░реНрдЪ рдХрд░реЗрдВ"), handle_search_button))
    application.add_handler(MessageHandler(filters.Text("тД╣я╕П рдмреЙрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ"), handle_about_button))
    application.add_handler(MessageHandler(filters.Text("ЁЯФД рдЪреИрдирд▓реНрд╕ рдлрд┐рд░ рд╕реЗ рдЪреЗрдХ рдХрд░реЗрдВ"), handle_recheck_button))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_number_input))
    
    # Add error handler
    application.add_error_handler(error_handler)
    
    # Start the bot
    print("ЁЯдЦ Bot is starting...")
    print(f"тЬЕ Bot Token: {BOT_TOKEN[:10]}...")  # First 10 chars only for security
    
    application.run_polling(
        drop_pending_updates=True,
        allowed_updates=Update.ALL_TYPES
    )

if __name__ == '__main__':
    main()